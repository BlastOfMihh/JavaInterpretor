id 0 
 *SymtableStack : [{}]
 *Output log : []
 *ExecutionStack:[((DefineProcedure{funcName='sum', varNames=[a, b], functionBody=(VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}))},(DefineProcedure{funcName='product', varNames=[a, b], functionBody=(VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression multiplication between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}))},(VarDeclarationStatement:v with type=IntType,(VarDeclarationStatement:w with type=IntType,(AssigmentStatemnet v=ValueExpression{value=Type:IntType Value:2},(AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})})))))))),NopStatement)]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{}]
 *Output log : []
 *ExecutionStack:[NopStatement, (DefineProcedure{funcName='sum', varNames=[a, b], functionBody=(VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}))},(DefineProcedure{funcName='product', varNames=[a, b], functionBody=(VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression multiplication between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}))},(VarDeclarationStatement:v with type=IntType,(VarDeclarationStatement:w with type=IntType,(AssigmentStatemnet v=ValueExpression{value=Type:IntType Value:2},(AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}))))))))]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{}]
 *Output log : []
 *ExecutionStack:[NopStatement, (DefineProcedure{funcName='sum', varNames=[a, b], functionBody=(VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}))},(DefineProcedure{funcName='product', varNames=[a, b], functionBody=(VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression multiplication between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}))},(VarDeclarationStatement:v with type=IntType,(VarDeclarationStatement:w with type=IntType,(AssigmentStatemnet v=ValueExpression{value=Type:IntType Value:2},(AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}))))))))]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{}]
 *Output log : []
 *ExecutionStack:[NopStatement, (DefineProcedure{funcName='product', varNames=[a, b], functionBody=(VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression multiplication between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}))},(VarDeclarationStatement:v with type=IntType,(VarDeclarationStatement:w with type=IntType,(AssigmentStatemnet v=ValueExpression{value=Type:IntType Value:2},(AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}))))))), DefineProcedure{funcName='sum', varNames=[a, b], functionBody=(VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}))}]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{}]
 *Output log : []
 *ExecutionStack:[NopStatement, (DefineProcedure{funcName='product', varNames=[a, b], functionBody=(VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression multiplication between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}))},(VarDeclarationStatement:v with type=IntType,(VarDeclarationStatement:w with type=IntType,(AssigmentStatemnet v=ValueExpression{value=Type:IntType Value:2},(AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}))))))), DefineProcedure{funcName='sum', varNames=[a, b], functionBody=(VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}))}]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{}]
 *Output log : []
 *ExecutionStack:[NopStatement, (DefineProcedure{funcName='product', varNames=[a, b], functionBody=(VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression multiplication between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}))},(VarDeclarationStatement:v with type=IntType,(VarDeclarationStatement:w with type=IntType,(AssigmentStatemnet v=ValueExpression{value=Type:IntType Value:2},(AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})})))))))]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{}]
 *Output log : []
 *ExecutionStack:[NopStatement, (DefineProcedure{funcName='product', varNames=[a, b], functionBody=(VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression multiplication between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}))},(VarDeclarationStatement:v with type=IntType,(VarDeclarationStatement:w with type=IntType,(AssigmentStatemnet v=ValueExpression{value=Type:IntType Value:2},(AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})})))))))]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{}]
 *Output log : []
 *ExecutionStack:[NopStatement, (VarDeclarationStatement:v with type=IntType,(VarDeclarationStatement:w with type=IntType,(AssigmentStatemnet v=ValueExpression{value=Type:IntType Value:2},(AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})})))))), DefineProcedure{funcName='product', varNames=[a, b], functionBody=(VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression multiplication between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}))}]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{}]
 *Output log : []
 *ExecutionStack:[NopStatement, (VarDeclarationStatement:v with type=IntType,(VarDeclarationStatement:w with type=IntType,(AssigmentStatemnet v=ValueExpression{value=Type:IntType Value:2},(AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})})))))), DefineProcedure{funcName='product', varNames=[a, b], functionBody=(VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression multiplication between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}))}]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{}]
 *Output log : []
 *ExecutionStack:[NopStatement, (VarDeclarationStatement:v with type=IntType,(VarDeclarationStatement:w with type=IntType,(AssigmentStatemnet v=ValueExpression{value=Type:IntType Value:2},(AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}))))))]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{}]
 *Output log : []
 *ExecutionStack:[NopStatement, (VarDeclarationStatement:v with type=IntType,(VarDeclarationStatement:w with type=IntType,(AssigmentStatemnet v=ValueExpression{value=Type:IntType Value:2},(AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}))))))]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{}]
 *Output log : []
 *ExecutionStack:[NopStatement, (VarDeclarationStatement:w with type=IntType,(AssigmentStatemnet v=ValueExpression{value=Type:IntType Value:2},(AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}))))), VarDeclarationStatement:v with type=IntType]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{}]
 *Output log : []
 *ExecutionStack:[NopStatement, (VarDeclarationStatement:w with type=IntType,(AssigmentStatemnet v=ValueExpression{value=Type:IntType Value:2},(AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}))))), VarDeclarationStatement:v with type=IntType]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{v=Type:IntType Value:0}]
 *Output log : []
 *ExecutionStack:[NopStatement, (VarDeclarationStatement:w with type=IntType,(AssigmentStatemnet v=ValueExpression{value=Type:IntType Value:2},(AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})})))))]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{v=Type:IntType Value:0}]
 *Output log : []
 *ExecutionStack:[NopStatement, (VarDeclarationStatement:w with type=IntType,(AssigmentStatemnet v=ValueExpression{value=Type:IntType Value:2},(AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})})))))]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{v=Type:IntType Value:0}]
 *Output log : []
 *ExecutionStack:[NopStatement, (AssigmentStatemnet v=ValueExpression{value=Type:IntType Value:2},(AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})})))), VarDeclarationStatement:w with type=IntType]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{v=Type:IntType Value:0}]
 *Output log : []
 *ExecutionStack:[NopStatement, (AssigmentStatemnet v=ValueExpression{value=Type:IntType Value:2},(AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})})))), VarDeclarationStatement:w with type=IntType]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:0, v=Type:IntType Value:0}]
 *Output log : []
 *ExecutionStack:[NopStatement, (AssigmentStatemnet v=ValueExpression{value=Type:IntType Value:2},(AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}))))]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:0, v=Type:IntType Value:0}]
 *Output log : []
 *ExecutionStack:[NopStatement, (AssigmentStatemnet v=ValueExpression{value=Type:IntType Value:2},(AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}))))]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:0, v=Type:IntType Value:0}]
 *Output log : []
 *ExecutionStack:[NopStatement, (AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}))), AssigmentStatemnet v=ValueExpression{value=Type:IntType Value:2}]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:0, v=Type:IntType Value:0}]
 *Output log : []
 *ExecutionStack:[NopStatement, (AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}))), AssigmentStatemnet v=ValueExpression{value=Type:IntType Value:2}]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:0, v=Type:IntType Value:2}]
 *Output log : []
 *ExecutionStack:[NopStatement, (AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})})))]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:0, v=Type:IntType Value:2}]
 *Output log : []
 *ExecutionStack:[NopStatement, (AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5},(ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})})))]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:0, v=Type:IntType Value:2}]
 *Output log : []
 *ExecutionStack:[NopStatement, (ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})})), AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5}]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:0, v=Type:IntType Value:2}]
 *Output log : []
 *ExecutionStack:[NopStatement, (ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})})), AssigmentStatemnet w=ValueExpression{value=Type:IntType Value:5}]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : []
 *ExecutionStack:[NopStatement, (ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}))]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : []
 *ExecutionStack:[NopStatement, (ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]},(PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}))]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : []
 *ExecutionStack:[NopStatement, (PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}), ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]}]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : []
 *ExecutionStack:[NopStatement, (PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}), ExecuteProc{procName='sum', procArguments=[Expression multiplication between VariableExpression{key='v'} and ValueExpression{value=Type:IntType Value:10}, VariableExpression{key='w'}]}]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:20}]
 *Output log : []
 *ExecutionStack:[NopStatement, (PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}), ((VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}})),ReturnStmt)]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:20}]
 *Output log : []
 *ExecutionStack:[NopStatement, (PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}), ((VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}})),ReturnStmt)]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:20}]
 *Output log : []
 *ExecutionStack:[NopStatement, (PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}), ReturnStmt, (VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}))]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:20}]
 *Output log : []
 *ExecutionStack:[NopStatement, (PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}), ReturnStmt, (VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}))]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:20}]
 *Output log : []
 *ExecutionStack:[NopStatement, (PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}), ReturnStmt, (AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}), VarDeclarationStatement:v with type=IntType]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:20}]
 *Output log : []
 *ExecutionStack:[NopStatement, (PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}), ReturnStmt, (AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}), VarDeclarationStatement:v with type=IntType]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:20, v=Type:IntType Value:0}]
 *Output log : []
 *ExecutionStack:[NopStatement, (PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}), ReturnStmt, (AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}})]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:20, v=Type:IntType Value:0}]
 *Output log : []
 *ExecutionStack:[NopStatement, (PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}), ReturnStmt, (AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}})]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:20, v=Type:IntType Value:0}]
 *Output log : []
 *ExecutionStack:[NopStatement, (PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}), ReturnStmt, PrintStatement{VariableExpression{key='v'}}, AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'}]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:20, v=Type:IntType Value:0}]
 *Output log : []
 *ExecutionStack:[NopStatement, (PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}), ReturnStmt, PrintStatement{VariableExpression{key='v'}}, AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'}]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:20, v=Type:IntType Value:25}]
 *Output log : []
 *ExecutionStack:[NopStatement, (PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}), ReturnStmt, PrintStatement{VariableExpression{key='v'}}]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:20, v=Type:IntType Value:25}]
 *Output log : []
 *ExecutionStack:[NopStatement, (PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}), ReturnStmt, PrintStatement{VariableExpression{key='v'}}]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:20, v=Type:IntType Value:25}]
 *Output log : [Type:IntType Value:25
]
 *ExecutionStack:[NopStatement, (PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}), ReturnStmt]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:20, v=Type:IntType Value:25}]
 *Output log : [Type:IntType Value:25
]
 *ExecutionStack:[NopStatement, (PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}), ReturnStmt]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
]
 *ExecutionStack:[NopStatement, (PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})})]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
]
 *ExecutionStack:[NopStatement, (PrintStatement{VariableExpression{key='v'}},ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})})]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
]
 *ExecutionStack:[NopStatement, ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}, PrintStatement{VariableExpression{key='v'}}]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
]
 *ExecutionStack:[NopStatement, ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}, PrintStatement{VariableExpression{key='v'}}]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
]
 *ExecutionStack:[NopStatement, ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
]
 *ExecutionStack:[NopStatement, ForkStmt{statement=(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})}]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
]
 *ExecutionStack:[NopStatement]
 *FileTable: {}
 *Heap: {}

id 1 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
]
 *ExecutionStack:[(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
]
 *ExecutionStack:[NopStatement]
 *FileTable: {}
 *Heap: {}

id 1 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
]
 *ExecutionStack:[(ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]},ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}})]
 *FileTable: {}
 *Heap: {}

id 0 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
]
 *ExecutionStack:[]
 *FileTable: {}
 *Heap: {}

id 1 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
]
 *ExecutionStack:[ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}}, ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}]
 *FileTable: {}
 *Heap: {}

id 1 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
]
 *ExecutionStack:[ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}}, ExecuteProc{procName='product', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}]
 *FileTable: {}
 *Heap: {}

id 1 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
]
 *ExecutionStack:[ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}}, ((VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression multiplication between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}})),ReturnStmt)]
 *FileTable: {}
 *Heap: {}

id 1 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
]
 *ExecutionStack:[ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}}, ((VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression multiplication between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}})),ReturnStmt)]
 *FileTable: {}
 *Heap: {}

id 1 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
]
 *ExecutionStack:[ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}}, ReturnStmt, (VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression multiplication between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}))]
 *FileTable: {}
 *Heap: {}

id 1 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
]
 *ExecutionStack:[ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}}, ReturnStmt, (VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression multiplication between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}))]
 *FileTable: {}
 *Heap: {}

id 1 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
]
 *ExecutionStack:[ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}}, ReturnStmt, (AssigmentStatemnet v=Expression multiplication between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}), VarDeclarationStatement:v with type=IntType]
 *FileTable: {}
 *Heap: {}

id 1 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
]
 *ExecutionStack:[ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}}, ReturnStmt, (AssigmentStatemnet v=Expression multiplication between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}), VarDeclarationStatement:v with type=IntType]
 *FileTable: {}
 *Heap: {}

id 1 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2, v=Type:IntType Value:0}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
]
 *ExecutionStack:[ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}}, ReturnStmt, (AssigmentStatemnet v=Expression multiplication between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}})]
 *FileTable: {}
 *Heap: {}

id 1 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2, v=Type:IntType Value:0}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
]
 *ExecutionStack:[ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}}, ReturnStmt, (AssigmentStatemnet v=Expression multiplication between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}})]
 *FileTable: {}
 *Heap: {}

id 1 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2, v=Type:IntType Value:0}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
]
 *ExecutionStack:[ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}}, ReturnStmt, PrintStatement{VariableExpression{key='v'}}, AssigmentStatemnet v=Expression multiplication between VariableExpression{key='a'} and VariableExpression{key='b'}]
 *FileTable: {}
 *Heap: {}

id 1 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2, v=Type:IntType Value:0}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
]
 *ExecutionStack:[ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}}, ReturnStmt, PrintStatement{VariableExpression{key='v'}}, AssigmentStatemnet v=Expression multiplication between VariableExpression{key='a'} and VariableExpression{key='b'}]
 *FileTable: {}
 *Heap: {}

id 1 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2, v=Type:IntType Value:10}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
]
 *ExecutionStack:[ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}}, ReturnStmt, PrintStatement{VariableExpression{key='v'}}]
 *FileTable: {}
 *Heap: {}

id 1 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2, v=Type:IntType Value:10}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
]
 *ExecutionStack:[ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}}, ReturnStmt, PrintStatement{VariableExpression{key='v'}}]
 *FileTable: {}
 *Heap: {}

id 1 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2, v=Type:IntType Value:10}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
, Type:IntType Value:10
]
 *ExecutionStack:[ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}}, ReturnStmt]
 *FileTable: {}
 *Heap: {}

id 1 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2, v=Type:IntType Value:10}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
, Type:IntType Value:10
]
 *ExecutionStack:[ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}}, ReturnStmt]
 *FileTable: {}
 *Heap: {}

id 1 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
, Type:IntType Value:10
]
 *ExecutionStack:[ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}}]
 *FileTable: {}
 *Heap: {}

id 1 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
, Type:IntType Value:10
]
 *ExecutionStack:[ForkStmt{statement=ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}}]
 *FileTable: {}
 *Heap: {}

id 1 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
, Type:IntType Value:10
]
 *ExecutionStack:[]
 *FileTable: {}
 *Heap: {}

id 2 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
, Type:IntType Value:10
]
 *ExecutionStack:[ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}]
 *FileTable: {}
 *Heap: {}

id 2 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
, Type:IntType Value:10
]
 *ExecutionStack:[ExecuteProc{procName='sum', procArguments=[VariableExpression{key='v'}, VariableExpression{key='w'}]}]
 *FileTable: {}
 *Heap: {}

id 2 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
, Type:IntType Value:10
]
 *ExecutionStack:[((VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}})),ReturnStmt)]
 *FileTable: {}
 *Heap: {}

id 2 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
, Type:IntType Value:10
]
 *ExecutionStack:[((VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}})),ReturnStmt)]
 *FileTable: {}
 *Heap: {}

id 2 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
, Type:IntType Value:10
]
 *ExecutionStack:[ReturnStmt, (VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}))]
 *FileTable: {}
 *Heap: {}

id 2 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
, Type:IntType Value:10
]
 *ExecutionStack:[ReturnStmt, (VarDeclarationStatement:v with type=IntType,(AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}))]
 *FileTable: {}
 *Heap: {}

id 2 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
, Type:IntType Value:10
]
 *ExecutionStack:[ReturnStmt, (AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}), VarDeclarationStatement:v with type=IntType]
 *FileTable: {}
 *Heap: {}

id 2 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
, Type:IntType Value:10
]
 *ExecutionStack:[ReturnStmt, (AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}}), VarDeclarationStatement:v with type=IntType]
 *FileTable: {}
 *Heap: {}

id 2 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2, v=Type:IntType Value:0}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
, Type:IntType Value:10
]
 *ExecutionStack:[ReturnStmt, (AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}})]
 *FileTable: {}
 *Heap: {}

id 2 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2, v=Type:IntType Value:0}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
, Type:IntType Value:10
]
 *ExecutionStack:[ReturnStmt, (AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'},PrintStatement{VariableExpression{key='v'}})]
 *FileTable: {}
 *Heap: {}

id 2 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2, v=Type:IntType Value:0}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
, Type:IntType Value:10
]
 *ExecutionStack:[ReturnStmt, PrintStatement{VariableExpression{key='v'}}, AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'}]
 *FileTable: {}
 *Heap: {}

id 2 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2, v=Type:IntType Value:0}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
, Type:IntType Value:10
]
 *ExecutionStack:[ReturnStmt, PrintStatement{VariableExpression{key='v'}}, AssigmentStatemnet v=Expression plus between VariableExpression{key='a'} and VariableExpression{key='b'}]
 *FileTable: {}
 *Heap: {}

id 2 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2, v=Type:IntType Value:7}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
, Type:IntType Value:10
]
 *ExecutionStack:[ReturnStmt, PrintStatement{VariableExpression{key='v'}}]
 *FileTable: {}
 *Heap: {}

id 2 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2, v=Type:IntType Value:7}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
, Type:IntType Value:10
]
 *ExecutionStack:[ReturnStmt, PrintStatement{VariableExpression{key='v'}}]
 *FileTable: {}
 *Heap: {}

id 2 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2, v=Type:IntType Value:7}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
, Type:IntType Value:10
, Type:IntType Value:7
]
 *ExecutionStack:[ReturnStmt]
 *FileTable: {}
 *Heap: {}

id 2 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}, {b=Type:IntType Value:5, a=Type:IntType Value:2, v=Type:IntType Value:7}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
, Type:IntType Value:10
, Type:IntType Value:7
]
 *ExecutionStack:[ReturnStmt]
 *FileTable: {}
 *Heap: {}

id 2 
 *SymtableStack : [{w=Type:IntType Value:5, v=Type:IntType Value:2}]
 *Output log : [Type:IntType Value:25
, Type:IntType Value:2
, Type:IntType Value:10
, Type:IntType Value:7
]
 *ExecutionStack:[]
 *FileTable: {}
 *Heap: {}

